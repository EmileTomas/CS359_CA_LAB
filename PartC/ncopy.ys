#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
        # Loop header
        xorl %eax,%eax          # count = 0;
	iaddl $-2,%edx		#if len>=2	jump to unrolled Loop(UnLoop)
        jge UnLoop		#else jump to finish the only one iteration or even no iteration

Loop:   iaddl $2,%edx          	# if len==0
	je Done                	# if so, goto Done, else finish the only iteration
	mrmovl (%ebx), %esi     # read val from src...
	rmmovl %esi, (%ecx)     # ...and store it to dst
	andl %esi, %esi         # val <= 0?
	jle Done                # if so, goto Done
	iaddl $1, %eax        	# count++
	jmp Done		# we finish it

UnLoop: mrmovl (%ebx), %esi     # read val from src...
	mrmovl 4(%ebx), %edi    # read val from src[next]...
	iaddl $8, %ebx        	# (src++)++
	rmmovl %esi, (%ecx)     # ...and store it to dst
	rmmovl %edi, 4(%ecx)    # ...and store it to dst[next]
	iaddl $8, %ecx         	# (dst++)++

        andl %esi, %esi         # val <= 0?
        jle Next                # if so, goto Next test:
        iaddl $1, %eax         	# count++

Next:	andl %edi, %edi         # val <= 0?
        jle Npos                # if so, goto Npos:
        iaddl $1, %eax       	# count++

Npos:   iaddl $-2,%edx         	# len>=2?
	jge UnLoop             	# if so, do Unloop
				# else do the rest part

##Rest iteration
	iaddl $2,%edx           # len <= 0?
	je Done                 # if so, goto Done:
	mrmovl (%ebx), %esi     # read val from src...
	rmmovl %esi, (%ecx)     # ...and store it to dst
	andl %esi, %esi         # val <= 0?
	jle Done                # if so, goto Done
	iaddl $1, %eax        	# count++

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
