# Execution begin at address 0
        .pos 0
init:   irmovl Stack,%esp
        irmovl Stack,%ebp
        call Main
        halt

#Link list of the elements
        .align 4
ele1:
        .long 0x00a
        .long ele2
ele2:
        .long 0x0b0
        .long ele3
ele3:
        .long 0xc00
        .long 0           #check bit

Main:   pushl %ebp
        rrmovl %esp,%ebp

        #core
        irmovl ele1,%eax
        pushl %eax          #push link list
        call R_Sum          #call Sum

        rrmovl  %ebp,%esp
        popl  %ebp
        ret

R_Sum:
        pushl %ebp
        rrmovl %esp,%ebp

        xorl   %eax,%eax      #eax=sum=0, This is different from the previous version
        #if(pointer==null) return
        mrmovl 8(%ebp),%ecx   #ecx=ele1
        andl   %ecx,%ecx      #if(ele1=null) return
        je      End           #else loop

        #else
        mrmovl 4(%ecx),%edx   #edx=ele1.next
        mrmovl (%ecx),%esi    #esi=*ele1
        addl    %esi,%eax     #add *ele1 to sum

        pushl   %eax
        pushl   %edx
        call    R_Sum
        popl    %edx
        popl    %esi
        addl    %esi,%eax

End:    rrmovl  %ebp,%esp
        popl  %ebp
        ret

        .pos 0x100
Stack:
