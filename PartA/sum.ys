# Execution begin at address 0
        .pos 0
init:   irmovl Stack,%esp
        irmovl Stack,%ebp
        call Main
        halt

#Link list of the elements
        .align 4
ele1:
        .long 0x00a
        .long ele2
ele2:
        .long 0x0b0
        .long ele3
ele3:
        .long 0xc00
        .long 0           #check bit

Main:   pushl %ebp
        rrmovl %esp,%ebp

        #core
        irmovl ele1,%eax
        pushl %eax        #push link list
        call Sum          #call Sum

        rrmovl  %ebp,%esp
        popl  %ebp
        ret

Sum:    pushl %ebp
        rrmovl %esp,%ebp

        #core
        mrmovl 8(%ebp),%ecx   #ecx=ele1
        mrmovl 4(%ecx),%edx   #edx=ele1.next
        xorl   %eax,%eax      #eax=sum=0
        mrmovl (%ecx),%esi    #esi=*ele1
        addl    %esi,%eax     #add *ele1 to sum
        andl   %edx,%edx      #if(ele1.next=null) return
        je      End           #else loop

Loop:   rrmovl %edx,%ecx      #ecx=edx=next element
        mrmovl  4(%ecx),%edx  #edx=ecx.next
        mrmovl (%ecx),%esi    #esi=*pointer
        addl    %esi,%eax     #add esi to sum
        andl    %edx,%edx
        jne   Loop

End:    rrmovl  %ebp,%esp
        popl  %ebp
        ret

        .pos 0x100
Stack:
